USE ROLE ACCOUNTADMIN;

-- Create warehouse, role, and database
CREATE WAREHOUSE IF NOT EXISTS INGES;
CREATE ROLE IF NOT EXISTS INGES;
GRANT USAGE ON WAREHOUSE INGES TO ROLE INGES;
GRANT OPERATE ON WAREHOUSE INGES TO ROLE INGES;

CREATE DATABASE IF NOT EXISTS INGES;
USE DATABASE INGES;
CREATE SCHEMA IF NOT EXISTS INGES;
USE SCHEMA INGES;

GRANT OWNERSHIP ON DATABASE INGES TO ROLE INGES;
GRANT OWNERSHIP ON SCHEMA INGES.INGES TO ROLE INGES;

-- Create user (replace YOUR_PASSWORD with a secure password)
CREATE USER INGES PASSWORD='YOUR_PASSWORD' LOGIN_NAME='INGES' 
    MUST_CHANGE_PASSWORD=FALSE, DISABLED=FALSE, 
    DEFAULT_WAREHOUSE='INGES', DEFAULT_NAMESPACE='INGES.INGES', 
    DEFAULT_ROLE='INGES';

GRANT ROLE INGES TO USER INGES;

-- Grant yourself the INGES role for management
SET USERNAME=CURRENT_USER();
GRANT ROLE INGES TO USER IDENTIFIER($USERNAME);


USE ROLE INGES;

-- Table for KSCM figurines orders
CREATE OR REPLACE TABLE CLIENT_SUPPORT_ORDERS (
    TXID VARCHAR(255) NOT NULL,
    RFID VARCHAR(255) NOT NULL,  
    ITEM VARCHAR(255) NOT NULL,
    PURCHASE_TIME TIMESTAMP NOT NULL,
    EXPIRATION_TIME DATE NOT NULL,
    DAYS NUMBER NOT NULL,
    NAME VARCHAR(255) NOT NULL,
    ADDRESS VARIANT,                     
    PHONE VARCHAR(255),                  
    EMAIL VARCHAR(255),                  
    EMERGENCY_CONTACT VARIANT,           
    PRIMARY KEY (TXID)
);

-- Add comments for clarity
COMMENT ON TABLE CLIENT_SUPPORT_ORDERS IS 'Customer orders for KSCM figurines inventory';
COMMENT ON COLUMN CLIENT_SUPPORT_ORDERS.ITEM IS 'Product from KSCM figurines inventory';
COMMENT ON COLUMN CLIENT_SUPPORT_ORDERS.ADDRESS IS 'JSON: {street_address, city, state, postalcode} or NULL';
COMMENT ON COLUMN CLIENT_SUPPORT_ORDERS.EMERGENCY_CONTACT IS 'JSON: {name, phone} or NULL';


-- Create the table for KSCM figurines orders
USE ROLE INGES;
CREATE OR REPLACE TABLE CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE (
    TXID VARCHAR(255),
    RFID VARCHAR(255), 
    ITEM VARCHAR(255),                    -- Merchandise products
    PURCHASE_TIME TIMESTAMP,
    EXPIRATION_TIME DATE,
    DAYS NUMBER,
    NAME VARCHAR(255),
    ADDRESS VARIANT,                    -- JSON: {street_address, city, state, postalcode}
    PHONE VARCHAR(255),
    EMAIL VARCHAR(255),
    EMERGENCY_CONTACT VARIANT           -- JSON: {name, phone}
);

-- Create the Snowpipe to handle the ingest
CREATE OR REPLACE PIPE CLIENT_SUPPORT_ORDERS_PIPE AS 
COPY INTO CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE
FILE_FORMAT=(TYPE='PARQUET') 
MATCH_BY_COLUMN_NAME=CASE_SENSITIVE;

-- Check total records (may take 1-2 minutes to appear)
SELECT COUNT(*) FROM CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE;

-- Check recent data
SELECT * FROM CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE 
ORDER BY PURCHASE_TIME DESC 
LIMIT 10;

-- Check the copy history for your table
SELECT
    FILE_NAME,
    STATUS,
    ROW_PARSED,    -- Singular
    ROW_COUNT,     -- The column for loaded rows
    LAST_LOAD_TIME,
    ERROR_COUNT,   -- Good to check for errors too
FROM
    TABLE(INFORMATION_SCHEMA.COPY_HISTORY(
        TABLE_NAME => 'CLIENT_SUPPORT_ORDERS_PY_SNOWPIPE',
        START_TIME => DATEADD(hours, -2, current_timestamp())
    ))
ORDER BY
    LAST_LOAD_TIME DESC;