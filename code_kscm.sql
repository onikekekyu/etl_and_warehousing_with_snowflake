-- =============================================================================
-- PART 1: SETUP OF ROLE, USER, AND DATABASE (RUN AS ACCOUNTADMIN)
-- =============================================================================
USE ROLE ACCOUNTADMIN;

-- Create warehouse, role, and database with a consistent naming convention
CREATE WAREHOUSE IF NOT EXISTS FIGURINE_WH;
CREATE ROLE IF NOT EXISTS FIGURINE_ROLE;
GRANT USAGE ON WAREHOUSE FIGURINE_WH TO ROLE FIGURINE_ROLE;
GRANT OPERATE ON WAREHOUSE FIGURINE_WH TO ROLE FIGURINE_ROLE;

CREATE DATABASE IF NOT EXISTS FIGURINE_DB;
CREATE SCHEMA IF NOT EXISTS FIGURINE_DB.FIGURINE_SCHEMA;

GRANT OWNERSHIP ON DATABASE FIGURINE_DB TO ROLE FIGURINE_ROLE;
GRANT OWNERSHIP ON SCHEMA FIGURINE_DB.FIGURINE_SCHEMA TO ROLE FIGURINE_ROLE;

-- Create user for data ingestion
-- IMPORTANT: Replace 'YOUR_SECURE_PASSWORD' with a strong, unique password.
CREATE USER IF NOT EXISTS FIGURINE_USER 
    PASSWORD='YOUR_SECURE_PASSWORD' 
    LOGIN_NAME='FIGURINE_USER' 
    MUST_CHANGE_PASSWORD=FALSE, 
    DISABLED=FALSE, 
    DEFAULT_WAREHOUSE='FIGURINE_WH', 
    DEFAULT_NAMESPACE='FIGURINE_DB.FIGURINE_SCHEMA', 
    DEFAULT_ROLE='FIGURINE_ROLE';

GRANT ROLE FIGURINE_ROLE TO USER FIGURINE_USER;

-- Optional: Grant the role to yourself for easy management from the UI
SET MY_USER = CURRENT_USER();
GRANT ROLE FIGURINE_ROLE TO USER IDENTIFIER($MY_USER);

-- =============================================================================
-- PART 2: TABLE AND SNOWPIPE CREATION (RUN AS FIGURINE_ROLE)
-- =============================================================================
USE ROLE FIGURINE_ROLE;
USE WAREHOUSE FIGURINE_WH;
USE SCHEMA FIGURINE_DB.FIGURINE_SCHEMA;

-- --- Table 1: PRODUCTS ---
CREATE OR REPLACE TABLE PRODUCTS (
    PRODUCT_ID VARCHAR(255) PRIMARY KEY,
    MODEL_NAME VARCHAR(255),
    THEME VARCHAR(255),
    FINISH VARCHAR(255),
    BASE_PRICE NUMBER(10, 2),
    SKU VARCHAR(255),
    STOCK_QUANTITY NUMBER,
    LAUNCH_DATE DATE
);
CREATE OR REPLACE STAGE PRODUCTS_STAGE;
CREATE OR REPLACE PIPE PRODUCTS_PIPE AUTO_INGEST=TRUE AS
COPY INTO PRODUCTS
FROM @PRODUCTS_STAGE
FILE_FORMAT = (TYPE = 'PARQUET')
MATCH_BY_COLUMN_NAME = CASE_SENSITIVE;


-- --- Table 2: CUSTOMERS ---
CREATE OR REPLACE TABLE CUSTOMERS (
    CUSTOMER_ID VARCHAR(255) PRIMARY KEY,
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    EMAIL VARCHAR(255),
    REGISTRATION_DATE TIMESTAMP_NTZ
);
CREATE OR REPLACE STAGE CUSTOMERS_STAGE;
CREATE OR REPLACE PIPE CUSTOMERS_PIPE AUTO_INGEST=TRUE AS
COPY INTO CUSTOMERS
FROM @CUSTOMERS_STAGE
FILE_FORMAT = (TYPE = 'PARQUET')
MATCH_BY_COLUMN_NAME = CASE_SENSITIVE;


-- --- Table 3: ORDERS ---
CREATE OR REPLACE TABLE ORDERS (
    ORDER_ID VARCHAR(255) PRIMARY KEY,
    CUSTOMER_ID VARCHAR(255),
    ORDER_DATE TIMESTAMP_NTZ,
    ORDER_STATUS VARCHAR(50),
    SALES_CHANNEL VARCHAR(50),
    STORE_ID VARCHAR(255)
);
CREATE OR REPLACE STAGE ORDERS_STAGE;
CREATE OR REPLACE PIPE ORDERS_PIPE AUTO_INGEST=TRUE AS
COPY INTO ORDERS
FROM @ORDERS_STAGE
FILE_FORMAT = (TYPE = 'PARQUET')
MATCH_BY_COLUMN_NAME = CASE_SENSITIVE;


-- --- Table 4: ORDER_ITEMS ---
CREATE OR REPLACE TABLE ORDER_ITEMS (
    ORDER_ID VARCHAR(255),
    PRODUCT_ID VARCHAR(255),
    QUANTITY NUMBER,
    PRICE_AT_PURCHASE NUMBER(10, 2),
    RFID VARCHAR(255)
);
CREATE OR REPLACE STAGE ORDER_ITEMS_STAGE;
CREATE OR REPLACE PIPE ORDER_ITEMS_PIPE AUTO_INGEST=TRUE AS
COPY INTO ORDER_ITEMS
FROM @ORDER_ITEMS_STAGE
FILE_FORMAT = (TYPE = 'PARQUET')
MATCH_BY_COLUMN_NAME = CASE_SENSITIVE;


-- =============================================================================
-- PART 3: VERIFICATION QUERIES
-- =============================================================================

-- Check if pipes have been created and are running
SHOW PIPES;

-- After running the ingestion script, check the record counts (wait 1-2 mins)
SELECT 'PRODUCTS', COUNT(*) FROM PRODUCTS UNION ALL
SELECT 'CUSTOMERS', COUNT(*) FROM CUSTOMERS UNION ALL
SELECT 'ORDERS', COUNT(*) FROM ORDERS UNION ALL
SELECT 'ORDER_ITEMS', COUNT(*) FROM ORDER_ITEMS;

-- Check the copy history for a specific table
SELECT *
FROM TABLE(INFORMATION_SCHEMA.COPY_HISTORY(
    TABLE_NAME => 'ORDERS',
    START_TIME => DATEADD(hours, -1, current_timestamp())
));